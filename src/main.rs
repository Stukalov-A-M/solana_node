use std::process::Stdio;
use std::time::Duration;
use tokio::process::Command;
use tokio::time::sleep;

#[tokio::main]
async fn main() {
    start_solana_node().await;

    println!("üîó –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –±–ª–æ–∫—á–µ–π–Ω–æ–º!");

    loop {
        sleep(Duration::from_secs(60)).await;
    }
}

async fn start_solana_node() {
    println!("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π Solana –±–ª–æ–∫—á–µ–π–Ω...");

    let output = Command::new("which")
        .arg("solana-test-validator")
        .output()
        .await
        .expect("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ solana-test-validator");

    let solana_bin = String::from_utf8_lossy(&output.stdout).trim().to_string();

    let mut child = Command::new(
        solana_bin,
    )
    .arg("--reset")
    .arg("--limit-ledger-size")
    .stdout(Stdio::null()) // –û—Ç–∫–ª—é—á–∞–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    .stderr(Stdio::null()) // –û—Ç–∫–ª—é—á–∞–µ–º –≤—ã–≤–æ–¥ –æ—à–∏–±–æ–∫
    .spawn()
    .expect("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Solana-—Ç–µ—Å—Ç–æ–≤—ã–π —É–∑–µ–ª");

    // –ñ–¥–µ–º, —á—Ç–æ–±—ã –Ω–æ–¥–∞ —É—Å–ø–µ–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    sleep(Duration::from_secs(5)).await;

    println!("‚úÖ Solana-—Ç–µ—Å—Ç–æ–≤—ã–π —É–∑–µ–ª —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ http://127.0.0.1:8899");

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ (–Ω–æ–¥–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è)
    let _ = child.wait().await;
}
